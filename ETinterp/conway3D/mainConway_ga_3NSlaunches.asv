%Conway-based approach
run('MatlabSetup.m')
%% SPACECRAFT CHARACTERISTICS
data_stacks.Isp = 4300;                                       % specific impulse [s]
data_stacks.Mdry = 1600;                                      % Total Mass of the s/c [kg]
data_stacks.n_int = 1000;
%% BOUNDARIES
% t0, TOF, N_rev, q, v_inf, alpha, beta, v_infcap, alphacap, betacap 
%%%%%
% lower boundary
lb = zeros(1,19); ub = lb;
lb(1) = date2mjd2000([2024 1 1 0 0 0]); %t0
lb(2) = 600; %TOF
lb(3) = 0; %N_rev
lb(4) = 3;% q
lb(5) = 0;% v_inf dep
lb(6) = 0;% alpha dep
lb(7) = 0;% beta dep
lb(8) = 600; %TOF
lb(9) = 0; %N_rev
lb(10) = 3;% q
lb(11) = 0;% v_inf dep
lb(12) = 0;% alpha dep
lb(13) = 0;% beta dep
lb(14) = 600; %TOF
lb(15) = 0; %N_rev
lb(16) = 3;% q
lb(17) = 0;% v_inf dep
lb(18) = 0;% alpha dep
lb(19) = 0;% beta dep
% upper boundary 
ub(1) = date2mjd2000([2030 1 1 0 0 0]);
ub(2) = 1000;
ub(3) = 2;
ub(4) = 8;
ub(5) = sqrt(9); %v_inf dep
ub(6) = pi;% alpha dep
ub(7) = pi;% beta dep
ub(8) = 1000;
ub(9) = 2;
ub(10) = 8;
ub(11) = sqrt(9); %v_inf dep
ub(12) = pi;% alpha dep
ub(13) = pi;% beta dep
ub(14) = 1000;
ub(15) = 2;
ub(16) = 8;
ub(17) = sqrt(9); %v_inf dep
ub(18) = pi;% alpha dep
ub(19) = pi;% beta dep

 
Bound = [lb; ub];
%% GENETIC ALGORITHM
% %%multiobj optimization of thrust and mass
options = optimoptions('gamultiobj', 'Display', 'Iter', ...
                       'PopulationSize', 200, 'StallGenLimit', 200, ... %          
                       'MaxGenerations', 200, ...
                       'ParetoFraction', 0.35, ...
                       'UseParallel', true, 'PopInitRange',Bound);
[SOL,feval,exitflag] = gamultiobj(@(x) gamultiobj_conway_3NSlaunches(x,data_stacks), 19,[],[],[],[],lb,ub,[],options);
feval(:,1) = feval(:,1)/10000;
feval(:,3) = feval(:,3)/10000;
feval(:,5) = feval(:,5)/10000;
%% SOLUTIONS
data_stacks.Tmax = 0.2; % N
[chosen, chosenT] = paretoplot(SOL, feval,data_stacks); %min TOF chosen
chosen = length(feval) %last value chosen
% chosen = find(feval(:,1)==min(feval(:,1))) %min T chosen
% % chosen = find(feval(:,2)==min(feval(:,2))) %min mP chosen
% % chosen = 1
chosen = chosenT
%%
data_stacks.n_int = 1000;
t01 = SOL(chosen, 1);             
TOF1 = SOL(chosen, 2);
N_rev1 = round(SOL(chosen, 3));    
q1 = SOL(chosen, 4);
v_inf1 = SOL(chosen, 5);
alpha1 = SOL(chosen, 6);
beta1 = SOL(chosen, 7);

%second launch
TOF2 = SOL(chosen, 8);
N_rev2 = round(SOL(chosen, 9));  
q2 = SOL(chosen, 10);
v_inf2 = SOL(chosen, 11);
alpha2 = SOL(chosen, 12); 
beta2 = SOL(chosen, 13);
t02 = t01 + TOF1 + 186 - TOF2;

%third launch
TOF3 = SOL(chosen, 14);
N_rev3 = round(SOL(chosen, 15));    
q3 = SOL(chosen, 16);
v_inf3 = SOL(chosen, 17); 
alpha3 = SOL(chosen, 18); 
beta3 = SOL(chosen, 19);
t03 = t01 + TOF1 + 372 - TOF3;
%first launch
[kepEarth_1, muS] = uplanet(t01,3);
[kepMars_1, ~]    = uplanet(t01 + TOF1,4);

[R1_1, v1_1] = kep2car2(kepEarth_1, muS); %km....
[R2_1, v2_1] = kep2car2(kepMars_1, muS);  %km....

%definition of plane of motion
r1norm_1 = norm(R1_1);
r2norm_1 = norm(R2_1);

r1vers_1 = R1_1/r1norm_1;
r2vers_1 = R2_1/r2norm_1;

hh_1 = cross(r1vers_1, r2vers_1);
hvers_1 = hh_1/norm(hh_1);

if hh_1(3) <0
    hvers_1 = -hvers_1;
end

%adding TMI maneuver
v1_1 = v1_1 + v_inf1*(sin(beta1)*cos(alpha1)*r1vers_1 + ...
                 sin(beta1)*sin(alpha1)*cross(hvers_1,r1vers_1) + ...
                 cos(beta1)*hvers_1);

%vinf @ Mars = 0;
             
[ m1, T1 ] = Conway(TOF1, N_rev1, q1, r1norm_1, r2norm_1, r1vers_1, r2vers_1, hvers_1, hh_1, v1_1, v2_1, muS, data_stacks);


%second launch
[kepEarth_2, ~] = uplanet(t02,3);
[kepMars_2, ~]    = uplanet(t02 + TOF2,4);

[R1_2, v1_2] = kep2car2(kepEarth_2, muS); %km....
[R2_2, v2_2] = kep2car2(kepMars_2, muS);  %km....

%definition of plane of motion
r1norm_2 = norm(R1_2);
r2norm_2 = norm(R2_2);

r1vers_2 = R1_2/r1norm_2;
r2vers_2 = R2_2/r2norm_2;

hh_2 = cross(r1vers_2, r2vers_2);
hvers_2 = hh_2/norm(hh_2);

if hh_2(3) <0
    hvers_2 = -hvers_2;
end

%adding TMI maneuver
v1_2 = v1_2 + v_inf2*(sin(beta2)*cos(alpha2)*r1vers_2 + ...
                 sin(beta2)*sin(alpha2)*cross(hvers_2,r1vers_2) + ...
                 cos(beta2)*hvers_2);

%vinf @ Mars = 0;
             
[ m2, T2 ] = Conway(TOF2, N_rev2, q2, r1norm_2, r2norm_2, r1vers_2, r2vers_2, hvers_2, hh_2, v1_2, v2_2, muS, data_stacks);

%thrid launch
[kepEarth_3, ~] = uplanet(t03,3);
[kepMars_3, ~]    = uplanet(t03 + TOF3,4);

[R1_3, v1_3] = kep2car2(kepEarth_3, muS); %km....
[R2_3, v2_3] = kep2car2(kepMars_3, muS);  %km....

%definition of plane of motion
r1norm_3 = norm(R1_3);
r2norm_3 = norm(R2_3);

r1vers_3 = R1_3/r1norm_3;
r2vers_3 = R2_3/r2norm_3;

hh_3 = cross(r1vers_3, r2vers_3);
hvers_3 = hh_3/norm(hh_3);

if hh_3(3) <0
    hvers_3 = -hvers_3;
end

%adding TMI maneuver
v1_3 = v1_3 + v_inf3*(sin(beta3)*cos(alpha3)*r1vers_3 + ...
                 sin(beta3)*sin(alpha3)*cross(hvers_3,r1vers_3) + ...
                 cos(beta3)*hvers_3);

%vinf @ Mars = 0;
             
[ m3, T3 ] = Conway(TOF3, N_rev3, q3, r1norm_3, r2norm_3, r1vers_3, r2vers_3, hvers_3, hh_3, v1_3, v2_3, muS, data_stacks);

y = ones(6,1);
if ~isnan(m1) 

        y(1) = max(abs(T1))*10000;
        y(2) = m1(1) - m1(end);
else
    y = 1e7*ones(6,1);
end
if ~isnan(m2) 

        y(3) = max(abs(T2))*10000;
        y(4) = m2(1) - m2(end);
else
    y = 1e7*ones(6,1);
end
if ~isnan(m3) 

        y(5) = max(abs(T3))*10000;
        y(6) = m3(1) - m3(end);
else
    y = 1e7*ones(6,1);
end
 
% % optimization result
datedep1=mjd20002date(t01);
datearr1=mjd20002date(t01 + TOF1);

fprintf('%%%%%% OPTIMIZATION RESULTS %%%%%% \n')
fprintf('%%%%%% FIRST LAUNCH \n \n')
fprintf('Departure Date \t %d %d %d \n', datedep1(3), datedep1(2),datedep1(1));
fprintf('Arrival Date \t %d %d %d \n', datearr1(3), datearr1(2),datearr1(1));
fprintf('TOF \t \t %d days (%d yrs)\n', TOF1, TOF1/365);
fprintf('N_rev \t \t %d \n', N_rev1);
fprintf('q \t \t %d \n \n', q1);
fprintf('Departure v_inf: \t %d km/s (C3 = %d km^2/s^2) \n', norm(v_inf1), norm(v_inf1)^2)
fprintf('Isp: \t %d s\n', data_stacks.Isp)
fprintf('Mdry: \t %d kg\n', data_stacks.Mdry)
fprintf('Propellant mass: \t %d kg \n', m1(1) - m1(end))
fprintf('Mass ratio: \t %d \n', m1(end)/m1(1))
fprintf('Fuel Mass Fraction: \t %d \n', (m1(1) - m1(end))/m1(1))
fprintf('max T : \t %d N\n',max(abs(T1)))

datedep2=mjd20002date(t02);
datearr2=mjd20002date(t02 + TOF2);
fprintf('%%%%%% SECOND LAUNCH \n \n')
fprintf('Departure Date \t %d %d %d \n', datedep2(3), datedep2(2),datedep2(1));
fprintf('Arrival Date \t %d %d %d \n', datearr2(3), datearr2(2),datearr2(1));
fprintf('TOF \t \t %d days (%d yrs)\n', TOF2, TOF2/365);
fprintf('N_rev \t \t %d \n', N_rev2);
fprintf('q \t \t %d \n \n', q2);
fprintf('Departure v_inf: \t %d km/s (C3 = %d km^2/s^2)   \n \n', norm(v_inf2), norm(v_inf2)^2)
fprintf('Isp: \t %d s\n', data_stacks.Isp)
fprintf('Mdry: \t %d kg\n', data_stacks.Mdry)
fprintf('Propellant mass: \t %d kg \n', m2(1) - m2(end))
fprintf('Mass ratio: \t %d \n', m2(end)/m2(1))
fprintf('Fuel Mass Fraction: \t %d \n', (m2(1) - m2(end))/m2(1))
fprintf('max T : \t %d N\n',max(abs(T2)))

datedep3=mjd20002date(t03);
datearr3=mjd20002date(t03 + TOF3);

fprintf('%%%%%% THIRD LAUNCH \n \n')
fprintf('Departure Date \t %d %d %d \n', datedep3(3), datedep3(2),datedep3(1));
fprintf('Arrival Date \t %d %d %d \n', datearr3(3), datearr3(2),datearr3(1));
fprintf('TOF \t \t %d days (%d yrs)\n', TOF3, TOF3/365);
fprintf('N_rev \t \t %d \n', N_rev3);
fprintf('q \t \t %d \n \n', q3);
fprintf('Departure v_inf: \t %d km/s (C3 = %d km^2/s^2) \n', norm(v_inf3), norm(v_inf3)^2)
fprintf('Isp: \t %d s\n', data_stacks.Isp)
fprintf('Mdry: \t %d kg\n', data_stacks.Mdry)
fprintf('Propellant mass: \t %d kg \n', m3(1) - m3(end))
fprintf('Mass ratio: \t %d \n', m3(end)/m3(1))
fprintf('Fuel Mass Fraction: \t %d \n', (m3(1) - m3(end))/m3(1))
fprintf('max T : \t %d N\n',max(abs(T3)))
%%
function [chosen, chosenT] = paretoplot(SOL, feval, data)
figure()
sgtitle('Pareto Front')
minTOF = 1e5; chosen = 0;
for i = 1:length(feval)
    if feval(i,1) <= data.Tmax
        plot(feval(i,1), feval(i,2), 'ro','HandleVisibility','off'), hold on
    else 
        plot(feval(i,1), feval(i,2), 'k+','HandleVisibility','off'), hold on
    end
         if SOL(i,2) + 372 < minTOF
            minTOF = SOL(i,2) + 372;
            chosen = i;
         end
end
minmaxT1 = feval(find(feval(:,1) == min(feval(:,1))),1) ;
minmaxT2 = feval(find(feval(:,3) == min(feval(:,3))),1) ;
minmaxT3 = feval(find(feval(:,5) == min(feval(:,5))),1) ;
if minmaxT1 > minmaxT2 && minmaxT1 > minmaxT3
    chosenT = find(feval(:,1) == min(feval(:,1)));
end
if minmaxT2 > minmaxT1 && minmaxT2 > minmaxT3
    chosenT = find(feval(:,1) == min(feval(:,1)));
end
if minmaxT3 > minmaxT1 && minmaxT3 > minmaxT2
    chosenT = find(feval(:,1) == min(feval(:,1)));
end

plot(feval(chosen,1), feval(chosen,2),'go', 'DisplayName',strcat('Min set-up time (', num2str(SOL(chosen,2)),'days )')); hold on
plot(feval(chosenT,1), feval(chosenT,2),'bo', 'DisplayName',strcat('Min ( max(T(t))) (', num2str(feval(chosenT,1)),'N )')); hold off
xline(data.Tmax,'r','DisplayName','Max Thrust < 0.2 N'), xlabel('max(|T(t)|) [N]'), ylabel('m_P [kg]') , legend()
end
